plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
    id 'io.codearte.nexus-staging' version '0.20.0'
}

subprojects {

    apply plugin: 'groovy'
    apply plugin: 'signing'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8

    scmVersion {
        tag {
            prefix = ''
        }
    }

    group = 'com.github.mkopylec'
    archivesBaseName = name
    version = scmVersion.version

    repositories {
        mavenCentral()
    }

    ext {
        springBootVersion = '2.1.3.RELEASE'
        resilience4jVersion = '0.15.0'
        micrometerVersion = '1.1.3'
        okHttpVersion = '3.14.2'
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }

    task sourceJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourceJar
    }

    signing {
        if (project.ext.has('signArtifacts')) {
            sign configurations.archives
        }
    }

    ext {
        ossrhUsername = project.ext.has('ossrhUsername') ? project.ext.ossrhUsername : ''
        ossrhPassword = project.ext.has('ossrhPassword') ? project.ext.ossrhPassword : ''
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name 'Charon Spring Boot Starter'
                    packaging 'jar'
                    description 'Reverse proxy implementation in form of Spring Boot starter.'
                    url 'https://github.com/mkopylec/charon-spring-boot-starter'
                    scm {
                        connection 'scm:git:https://github.com/mkopylec/charon-spring-boot-starter.git'
                        developerConnection 'scm:git:https://github.com/mkopylec/charon-spring-boot-starter.git'
                        url 'https://github.com/mkopylec/charon-spring-boot-starter'
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'mkopylec'
                            name 'Mariusz Kopylec'
                            email 'mariusz.kopylec@o2.pl'
                        }
                    }
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }

    jacoco {
        toolVersion = '0.8.1'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

wrapper {
    gradleVersion = '5.2.1'
}
